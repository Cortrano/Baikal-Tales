[gd_scene load_steps=33 format=2]

[ext_resource path="res://screen_shaders.gd" type="Script" id=1]
[ext_resource path="res://art/burano.jpg" type="Texture" id=2]
[ext_resource path="res://art/platformer.jpg" type="Texture" id=3]
[ext_resource path="res://art/mountains.jpg" type="Texture" id=4]
[ext_resource path="res://art/forest.jpg" type="Texture" id=5]
[ext_resource path="res://shaders/vignette.shader" type="Shader" id=6]
[ext_resource path="res://art/vignette.png" type="Texture" id=7]
[ext_resource path="res://art/white.png" type="Texture" id=8]
[ext_resource path="res://shaders/blur.shader" type="Shader" id=9]
[ext_resource path="res://shaders/pixelize.shader" type="Shader" id=10]
[ext_resource path="res://shaders/whirl.shader" type="Shader" id=11]
[ext_resource path="res://shaders/sepia.shader" type="Shader" id=12]
[ext_resource path="res://shaders/negative.shader" type="Shader" id=13]
[ext_resource path="res://shaders/contrasted.shader" type="Shader" id=14]
[ext_resource path="res://shaders/normalized.shader" type="Shader" id=15]
[ext_resource path="res://shaders/BCS.shader" type="Shader" id=16]
[ext_resource path="res://shaders/mirage.shader" type="Shader" id=17]
[ext_resource path="res://shaders/old_film.shader" type="Shader" id=18]
[ext_resource path="res://art/filmgrain.png" type="Texture" id=19]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 6 )
shader_param/vignette = ExtResource( 7 )

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 9 )
shader_param/amount = 4.0

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 10 )
shader_param/size_x = 0.008
shader_param/size_y = 0.008

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 11 )
shader_param/rotation = 3.0

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 12 )
shader_param/base = Color( 0.54451, 0.408353, 0.403137, 1 )

[sub_resource type="ShaderMaterial" id=6]
shader = ExtResource( 13 )

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 14 )

[sub_resource type="ShaderMaterial" id=8]
shader = ExtResource( 15 )

[sub_resource type="ShaderMaterial" id=9]
shader = ExtResource( 16 )
shader_param/brightness = 0.8
shader_param/contrast = 1.5
shader_param/saturation = 1.8

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 17 )
shader_param/frequency = 60.0
shader_param/depth = 0.005

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 18 )
shader_param/base = Color( 0.450274, 0.361255, 0.335059, 1 )
shader_param/grain_strength = 0.3
shader_param/fps = 12
shader_param/stretch = 0.5
shader_param/flashing = 0.01
shader_param/grain = ExtResource( 19 )
shader_param/vignette = ExtResource( 7 )

[sub_resource type="Shader" id=12]
code = "/*
Film Grain post-process shader v1.1	
Martins Upitis (martinsh) devlog-martinsh.blogspot.com
2013

imported to Godot by spl!te 2017

--------------------------
This work is licensed under a Creative Commons Attribution 3.0 Unported License.
So you are free to share, modify and adapt it for your needs, and even use it for commercial use.
I would also love to hear about a project you are using it.

Have fun,
Martins
--------------------------

Perlin noise shader by toneburst:
http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/
*/


uniform vec2 screen_size;
uniform bool enabled = false;

float grain_amount = 0.05; //grain amount
bool colored = false; //colored noise?
float color_amount = 0.6;
float grain_size = 1.6; //grain particle size (1.5 - 2.5)
float lum_amount = 1.0;

//a random texture generator, but you can also use a pre-computed perturbation texture
vec4 rnm(vec2 tc) 
{
  float noise =  sin(dot(tc + vec2(TIME,TIME),vec2(12.9898,78.233))) * 43758.5453;
	float noiseR =  fract(noise)*2.0-1.0;
    float noiseG =  fract(noise*1.2154)*2.0-1.0; 
    float noiseB =  fract(noise*1.3453)*2.0-1.0;
    float noiseA =  fract(noise*1.3647)*2.0-1.0;
    return vec4(noiseR,noiseG,noiseB,noiseA);
}

float fade(float t) {
    return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float pnoise3D(vec3 p)
{
    vec3 pi = 0.00390625*floor(p);
    pi = vec3(pi.x+0.001953125, pi.y+0.001953125, pi.z+0.001953125);
    vec3 pf = fract(p);     // Fractional part for interpolation

    // Noise contributions from (x=0, y=0), z=0 and z=1
    float perm00 = rnm(pi.xy).a ;
    vec3 grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0;
    grad000 = vec3(grad000.x - 1.0, grad000.y - 1.0, grad000.z - 1.0);
    float n000 = dot(grad000, pf);
    vec3 grad001 = rnm(vec2(perm00, pi.z + 0.00390625)).rgb * 4.0;
    grad001 = vec3(grad001.x - 1.0, grad001.y - 1.0, grad001.z - 1.0);
    float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));

    // Noise contributions from (x=0, y=1), z=0 and z=1
    float perm01 = rnm(pi.xy + vec2(0.0, 0.00390625)).a ;
    vec3 grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0;
    grad010 = vec3(grad010.x - 1.0, grad010.y - 1.0, grad010.z - 1.0);
    float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));
    vec3 grad011 = rnm(vec2(perm01, pi.z + 0.00390625)).rgb * 4.0;
    grad011 = vec3(grad011.x - 1.0, grad011.y - 1.0, grad011.z - 1.0);
    float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));

    // Noise contributions from (x=1, y=0), z=0 and z=1
    float perm10 = rnm(pi.xy + vec2(0.00390625, 0.0)).a ;
    vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0;
    grad100 = vec3(grad100.x - 1.0, grad100.y - 1.0, grad100.z - 1.0);
    float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));
    vec3  grad101 = rnm(vec2(perm10, pi.z + 0.00390625)).rgb * 4.0;
    grad101 = vec3(grad101.x - 1.0, grad101.y - 1.0, grad101.z - 1.0);
    float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));

    // Noise contributions from (x=1, y=1), z=0 and z=1
    float perm11 = rnm(pi.xy + vec2(0.00390625, 0.00390625)).a ;
    vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0;
    grad110 = vec3(grad110.x - 1.0, grad110.y - 1.0, grad110.z - 1.0);
    float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));
    vec3  grad111 = rnm(vec2(perm11, pi.z + 0.00390625)).rgb * 4.0;
    grad111 = vec3(grad111.x - 1.0, grad111.y - 1.0, grad111.z - 1.0);
    float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));

    // Blend contributions along x
    vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));

    // Blend contributions along y
    vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));

    // Blend contributions along z
    float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));

    // We're done, return the final noise value.
    return n_xyz;
}

//2d coordinate orientation thing
vec2 coordRot(vec2 tc, float angle)
{
    float aspect = screen_size.x/screen_size.y;
    float rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));
    float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));
    rotX = ((rotX/aspect)*0.5+0.5);
    rotY = rotY*0.5+0.5;
    return vec2(rotX,rotY);
}

if (enabled)
{
    vec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values	
    vec2 rotCoordsR = coordRot(UV, TIME + rotOffset.x);
    vec3 noise = vec3(pnoise3D(vec3(rotCoordsR*vec2(screen_size.x/grain_size,screen_size.y/grain_size),0.0)));
  
    if (colored)
    {
	    vec2 rotCoordsG = coordRot(UV, TIME + rotOffset.y);
	    vec2 rotCoordsB = coordRot(UV, TIME + rotOffset.z);
	    noise.g = mix(noise.r,pnoise3D(vec3(rotCoordsG*vec2(screen_size.x/grain_size,screen_size.y/grain_size),1.0)),color_amount);
	    noise.b = mix(noise.r,pnoise3D(vec3(rotCoordsB*vec2(screen_size.x/grain_size,screen_size.y/grain_size),2.0)),color_amount);
    }

    vec3 col = tex(TEXTURE, UV).rgb;
    vec3 lumcoeff = vec3(0.299,0.587,0.114);
    float luminance = mix(0.0,dot(col, lumcoeff),lum_amount);
    float lum = smoothstep(0.2,0.0,luminance);
    lum += luminance;

    noise = mix(noise,vec3(0.0),pow(lum,4.0));
    col = col+noise*grain_amount;

    COLOR = vec4(col,1.0) * SRC_COLOR;
} else {
    COLOR = tex(TEXTURE, UV) * SRC_COLOR;
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )

[node name="ScreenShaders" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
script = ExtResource( 1 )

[node name="Pictures" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Burano" type="TextureRect" parent="Pictures"]
margin_right = 40.0
margin_bottom = 40.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 2 )

[node name="Roby" type="TextureRect" parent="Pictures"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 3 )

[node name="Mountains" type="TextureRect" parent="Pictures"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 4 )

[node name="Forest" type="TextureRect" parent="Pictures"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 5 )

[node name="Effects" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2

[node name="Disabled" type="Control" parent="Effects"]
visible = false
margin_right = 40.0
margin_bottom = 40.0
size_flags_horizontal = 2
size_flags_vertical = 2

[node name="Vignette" type="TextureRect" parent="Effects"]
material = SubResource( 1 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Blur" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Pixelize" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Whirl" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Sepia" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 14.0
margin_bottom = -2.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Negative" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Contrasted" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Normalized" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 8 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="BCS" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 3.0
margin_bottom = -3.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Mirage" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="OldFilm" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 11 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -3.0
margin_right = 3.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="OldFilm2" type="TextureRect" parent="Effects"]
visible = false
material = SubResource( 13 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -6.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 8 )
expand = true

[node name="Picture" type="OptionButton" parent="."]
margin_left = 8.0
margin_top = 7.0
margin_right = 131.0
margin_bottom = 28.0
size_flags_horizontal = 2
size_flags_vertical = 2

[node name="Effect" type="OptionButton" parent="."]
margin_left = 137.0
margin_top = 7.0
margin_right = 260.0
margin_bottom = 28.0
size_flags_horizontal = 2
size_flags_vertical = 2

[node name="Viewport" type="Viewport" parent="."]
arvr = true
size = Vector2( 1920, 1080 )

[connection signal="item_selected" from="Picture" to="." method="_on_picture_item_selected"]
[connection signal="item_selected" from="Effect" to="." method="_on_effect_item_selected"]
